{"version":3,"sources":["Components/Common/Drawer.js","Components/Common/NavBar.js","ProtectedRoute.js","Components/Home.js","Components/Common/PageNotFound.js","Components/OpenPage/Login.js","Components/Pages/Test.js","Router.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","list","width","fullList","Drawer","anchor","classes","useState","isDrawedOpen","setDrawerState","toggleDrawer","open","event","type","key","Button","onClick","SwipeableDrawer","onClose","onOpen","className","clsx","role","onKeyDown","List","map","text","index","ListItem","button","ListItemIcon","ListItemText","primary","Divider","NavBar","ProtectedRoute","props","Component","component","id","Home","PageNotFound","Login","Test","AppRouter","basename","path","exact","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gaAaMA,EAAYC,YAAW,CAC3BC,KAAM,CACJC,MAAO,KAETC,SAAU,CACRD,MAAO,UAII,SAASE,IACtB,IAQcC,EARRC,EAAUP,IADe,EAEOQ,oBAAS,GAFhB,mBAExBC,EAFwB,KAEXC,EAFW,KAGzBC,EAAe,SAACC,GAAD,OAAU,SAACC,KAC1BA,GAAwB,YAAfA,EAAMC,MAAqC,QAAdD,EAAME,KAA+B,UAAdF,EAAME,MAGvEL,EAAeE,KA+BjB,OACM,oCACE,kBAACI,EAAA,EAAD,CAAQC,QAASN,GAAa,IAAQ,QACtC,kBAACO,EAAA,EAAD,CACEZ,OAAQ,OACRM,KAAMH,EACNU,QAASR,GAAa,GACtBS,OAAQT,GAAa,KApCjBL,EAsCE,OArCd,yBACEe,UAAWC,YAAKf,EAAQL,KAAT,eACZK,EAAQH,SAAsB,QAAXE,GAA+B,WAAXA,IAE1CiB,KAAK,eACLN,QAASN,GAAa,GACtBa,UAAWb,GAAa,IAExB,kBAACc,EAAA,EAAD,KACG,CAAC,QAAS,UAAW,aAAc,UAAUC,KAAI,SAACC,EAAMC,GAAP,OAChD,kBAACC,EAAA,EAAD,CAAUC,QAAM,EAACf,IAAKY,GACpB,kBAACI,EAAA,EAAD,KAAeH,EAAQ,IAAM,EAAI,kBAAC,IAAD,MAAgB,kBAAC,IAAD,OACjD,kBAACI,EAAA,EAAD,CAAcC,QAASN,SAI7B,kBAACO,EAAA,EAAD,MACA,kBAACT,EAAA,EAAD,KACG,CAAC,WAAY,QAAS,QAAQC,KAAI,SAACC,EAAMC,GAAP,OACjC,kBAACC,EAAA,EAAD,CAAUC,QAAM,EAACf,IAAKY,GACpB,kBAACI,EAAA,EAAD,KAAeH,EAAQ,IAAM,EAAI,kBAAC,IAAD,MAAgB,kBAAC,IAAD,OACjD,kBAACI,EAAA,EAAD,CAAcC,QAASN,a,MClD5B,SAASQ,IACZ,OACI,6BACI,yBAAKd,UAAU,aACX,yBAAKA,UAAU,SACf,yBAAKA,UAAU,SACf,yBAAKA,UAAU,UAEnB,yBAAKA,UAAU,kBACX,wBAAIA,UAAU,QAAd,SAA2B,4CCPpC,IAAMe,EAAiB,SAACC,GAC3B,IAAMC,EAAYD,EAAME,UAGxB,OAA0B,oCACtB,yBAAKC,GAAG,QACJ,kBAACL,EAAD,MACA,kBAAC9B,EAAD,MACA,yBAAKgB,UAAU,sBACX,kBAACiB,EAAD,U,MCZD,SAASG,IACpB,OACI,yBAAKpB,UAAU,IACf,sDCIOqB,MARf,WACI,OACI,oDCOOC,MARf,WACI,OACG,gECMQC,MARf,WACI,OACI,2CCGKC,EAAY,WACrB,OACI,kBAAC,IAAD,CAAQC,SAAS,UACb,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,KAAK,SAASC,OAAK,EAACT,UAAWI,IACtC,kBAAC,EAAD,CAAgBI,KAAK,IAAIC,OAAK,EAACT,UAAWE,IAC1C,kBAAC,EAAD,CAAgBM,KAAK,QAAQC,OAAK,EAACT,UAAWE,IAC9C,kBAAC,EAAD,CAAgBM,KAAK,QAAQC,OAAK,EAACT,UAAWK,IAC9C,kBAAC,IAAD,CAAOG,KAAK,IAAIC,OAAK,EAACT,UAAWG,OCJlCO,MARf,WACE,OACE,yBAAK5B,UAAU,OACb,kBAAC,EAAD,QCMc6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e8b3c8c3.chunk.js","sourcesContent":["import React , {useState} from 'react';\r\nimport clsx from 'clsx';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport SwipeableDrawer from '@material-ui/core/SwipeableDrawer';\r\nimport Button from '@material-ui/core/Button';\r\nimport List from '@material-ui/core/List';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\r\nimport MailIcon from '@material-ui/icons/Mail';\r\n\r\nconst useStyles = makeStyles({\r\n  list: {\r\n    width: 250,\r\n  },\r\n  fullList: {\r\n    width: 'auto',\r\n  },\r\n});\r\n\r\nexport default function Drawer() {\r\n  const classes = useStyles();\r\n  const [isDrawedOpen,setDrawerState] = useState(false);\r\n  const toggleDrawer = (open) => (event) => {\r\n    if (event && event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift')) {\r\n      return;\r\n    }\r\n    setDrawerState(open);\r\n  };\r\n  const list = (anchor) => (\r\n    <div\r\n      className={clsx(classes.list, {\r\n        [classes.fullList]: anchor === 'top' || anchor === 'bottom',\r\n      })}\r\n      role=\"presentation\"\r\n      onClick={toggleDrawer(false)}\r\n      onKeyDown={toggleDrawer(false)}\r\n    >\r\n      <List>\r\n        {['Inbox', 'Starred', 'Send email', 'Drafts'].map((text, index) => (\r\n          <ListItem button key={text}>\r\n            <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon>\r\n            <ListItemText primary={text} />\r\n          </ListItem>\r\n        ))}\r\n      </List>\r\n      <Divider />\r\n      <List>\r\n        {['All mail', 'Trash', 'Spam'].map((text, index) => (\r\n          <ListItem button key={text}>\r\n            <ListItemIcon>{index % 2 === 0 ? <InboxIcon /> : <MailIcon />}</ListItemIcon>\r\n            <ListItemText primary={text} />\r\n          </ListItem>\r\n        ))}\r\n      </List>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n        <>\r\n          <Button onClick={toggleDrawer(true)}>{'left'}</Button>\r\n          <SwipeableDrawer\r\n            anchor={'left'}\r\n            open={isDrawedOpen}\r\n            onClose={toggleDrawer(false)}\r\n            onOpen={toggleDrawer(true)}\r\n          >\r\n            {list('left')}\r\n          </SwipeableDrawer>\r\n        </>\r\n  );\r\n}","import React from 'react'\r\nimport '../../assets/css/navbar.css'\r\n// renaming is not allowed. if you want to rename export default\r\nexport function NavBar() {\r\n    return (\r\n        <nav>\r\n            <div className=\"hamburger\">\r\n                <div className=\"line\"></div>\r\n                <div className=\"line\"></div>\r\n                <div className=\"line\"></div>\r\n            </div>\r\n            <div className=\"logo-container\">\r\n                <h3 className=\"logo\">Deepak<span>_keshri</span></h3>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n ","import React from 'react'\r\nimport { Redirect } from 'react-router-dom'\r\nimport Drawer from './Components/Common/Drawer'\r\nimport {NavBar} from './Components/Common/NavBar'\r\n// import Footer from './Components/Footer'\r\nexport const ProtectedRoute = (props) => {\r\n    const Component = props.component;\r\n    const isAuthenticated = true;\r\n\r\n    return isAuthenticated ? (<>\r\n        <div id=\"main\">\r\n            <NavBar />\r\n            <Drawer></Drawer>\r\n            <div className=\"mainContentSection\">\r\n                <Component />\r\n            </div>\r\n            {/* <div style={{color:\"white\"}} className=\"footer\">\r\n                <Footer/>\r\n            </div> */}\r\n        </div>\r\n    </>\r\n    ) : (\r\n            <Redirect to={{ pathname: '/login' }} />\r\n        );\r\n}","import React from 'react'\r\nimport '../assets/css/Pages/Home.css'\r\nexport default function Home() {\r\n    return(\r\n        <div className=\"\">\r\n        <h1>Welcome Deepak keshri</h1>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nfunction PageNotFound() {\r\n    return (\r\n        <div>\r\n            404 Page not found\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PageNotFound\r\n","import React from 'react'\r\n\r\nfunction Login() {\r\n    return (\r\n       <>\r\n       login page to implement\r\n       </>\r\n    )\r\n}\r\n\r\nexport default Login\r\n","import React from 'react'\r\n\r\nfunction Test() {\r\n    return (\r\n        <div>\r\n            Test page\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Test\r\n","import React from 'react'\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\r\nimport { ProtectedRoute } from './ProtectedRoute'\r\nimport Home from './Components/Home'\r\nimport PageNotFound from './Components/Common/PageNotFound'\r\nimport Login from './Components/OpenPage/Login'\r\nimport Test from './Components/Pages/Test'\r\nexport const AppRouter = () => {\r\n    return (\r\n        <Router basename=\"/React\">\r\n            <Switch>\r\n                <Route path=\"/Login\" exact component={Login} />\r\n                <ProtectedRoute path=\"/\" exact component={Home} />\r\n                <ProtectedRoute path=\"/Home\" exact component={Home} />\r\n                <ProtectedRoute path=\"/Test\" exact component={Test} />\r\n                <Route path=\"*\" exact component={PageNotFound} />\r\n            </Switch>\r\n        </Router>\r\n    )\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport {AppRouter} from './Router'\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <AppRouter/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}