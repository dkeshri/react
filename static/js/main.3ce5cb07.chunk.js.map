{"version":3,"sources":["assets/img/svg/google.svg","assets/img/pages/login.png","ApiCall/index.js","Components/Home.js","utility/index.js","Components/Common/PageNotFound.js","Components/OpenPage/Login.js","Router.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","staticProperty","baseUrl","responseType","headers","useHttpRequest","argData","dependencies","useState","isLoading","setLoading","fetchedData","setFetchedData","useEffect","axios","url","method","baseURL","params","data","transformRequest","transformResponse","then","res","catch","e","console","log","useStyles","makeStyles","theme","root","margin","paperStyle","padding","minHeight","paperStyle2","SelectStyle","width","Home","value","label","selectedPost","setSelectedPost","selectedUser","setSelectedUser","postOptions","setPostOptions","userOptions","setUserOptions","userList","postList","post","id","options","filter","item","userId","map","title","length","UserOptions","index","name","expires","path","argCookies","undefined","Date","setDate","now","key","cookie","save","secure","httpOnly","setCookie","classes","className","Paper","elevation","onChange","selectedItem","placeholder","setetedItem","body","Button","onClick","promise","Promise","resolve","reject","Error","httpRequest","load","getCookie","PageNotFound","Login","Row","Col","sm","xl","lg","md","AppRouter","basename","exact","component","App","Router","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.3ce5cb07.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/google.73cbaa09.svg\";","module.exports = __webpack_public_path__ + \"static/media/login.fd58a052.png\";","import { useState, useEffect } from 'react'\r\nimport axios from 'axios';\r\nconst staticProperty = {\r\n  baseUrl:`https://jsonplaceholder.typicode.com`,\r\n  responseType: 'json',\r\n  headers:{\r\n    \"Content-type\": \"application/json; charset=UTF-8\"\r\n  }\r\n}\r\nexport const useHttpRequest = (argData = {}, dependencies = []) => {\r\n  const [isLoading, setLoading] = useState(false);\r\n  const [fetchedData, setFetchedData] = useState(null);\r\n  useEffect(() => {\r\n    setLoading(true);\r\n    setFetchedData(null);\r\n    axios({\r\n      // `url` is the server URL that will be used for the request\r\n      url: argData.url,\r\n      method: argData.method, // default\r\n      baseURL: staticProperty.baseUrl,\r\n      responseType: staticProperty.responseType,\r\n      params: argData.params,\r\n      data: argData.data,\r\n      transformRequest: [function (data, headers) {\r\n        // Do whatever you want to transform the data\r\n        return data;\r\n      }],\r\n      transformResponse: [function (data) {\r\n        // Do whatever you want to transform the data\r\n\r\n        return data;\r\n      }],\r\n      headers: staticProperty.headers,\r\n    })\r\n      .then(res => {\r\n        setLoading(false);\r\n        setFetchedData(res.data);\r\n      }).catch((e) => {\r\n        console.log(e);\r\n      });\r\n  }, dependencies);\r\n  return { isLoading, fetchedData };\r\n};\r\n\r\n\r\n\r\n// httpRequest for class component/Or for any EventHandler method like (onclick,onChange,componentDidMount, .....)\r\n\r\nexport const httpRequest = (argData = {}) => {\r\n  let fetchedData = null;\r\n  let promise = new Promise((resolve, reject) => {\r\n    axios({\r\n      // `url` is the server URL that will be used for the request\r\n      url: argData.url,\r\n      method: argData.method, // default\r\n      baseURL: staticProperty.baseUrl,\r\n      responseType: staticProperty.responseType,\r\n      params: argData.params,\r\n      data: argData.data,\r\n      transformRequest: [function (data, headers) {\r\n        // Do whatever you want to transform the data\r\n        return data;\r\n      }],\r\n      transformResponse: [function (data) {\r\n        // Do whatever you want to transform the data\r\n\r\n        return data;\r\n      }],\r\n      headers: staticProperty.headers,\r\n    })\r\n      .then(res => {\r\n        fetchedData = res.data;\r\n        resolve({ fetchedData });\r\n      }).catch((e) => {\r\n        reject(new Error(e));\r\n      });\r\n  });\r\n  return promise;\r\n};\r\n\r\n\r\n//Promise close","import React, {useEffect,useState } from 'react'\r\nimport { useHttpRequest,httpRequest } from '../ApiCall';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Select from 'react-select';\r\nimport { Button } from '@material-ui/core';\r\nimport {setCookie,getCookie} from '../utility'\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        margin: '10px'\r\n    },\r\n    paperStyle: {\r\n        padding: '10px',\r\n        minHeight: '600px'\r\n    },\r\n    paperStyle2: {\r\n        padding: '20px',\r\n        margin: '50px'\r\n    },\r\n    SelectStyle: {\r\n        width: '250px'\r\n    }\r\n}));\r\nfunction Home() {\r\n    const [selectedPost, setSelectedPost] = useState({ value: 0, label: \"\"});\r\n    const [selectedUser, setSelectedUser] = useState({ value: 0, label: \"\"});\r\n    const [postOptions,setPostOptions] = useState([]);\r\n    const [userOptions,setUserOptions] = useState([]);\r\n\r\n    let userList = useHttpRequest({\r\n        url: '/users',\r\n        method: 'Get'\r\n    }, []);\r\n    let postList = useHttpRequest({\r\n        url: `/posts`,\r\n        method: 'GET'\r\n    }, []);\r\n    let post = useHttpRequest({\r\n        url: `/posts`,\r\n        method: 'GET',\r\n        params: { id: selectedPost.value }\r\n    }, [selectedPost]);\r\n\r\n    useEffect(()=>{\r\n        if (postList.fetchedData != null) {\r\n            let options = postList.fetchedData.filter((item) => {\r\n                return item.userId===selectedUser.value;\r\n            }).map((item) => {\r\n                return { value: item.id, label: item.title}\r\n            });\r\n            setPostOptions(options);\r\n            if(options.length!==0)\r\n                setSelectedPost(options[0]);\r\n        }\r\n    },[selectedUser,postList.fetchedData]);\r\n    \r\n    useEffect(()=>{\r\n            if (userList.fetchedData != null) {\r\n                let UserOptions = userList.fetchedData.map((item, index) => {\r\n                    return { value: item.id, label: item.name }\r\n                });\r\n                setUserOptions(UserOptions);\r\n                setSelectedUser(UserOptions[0]);\r\n            }\r\n    },[userList.fetchedData]);\r\n    \r\n    //------------------------- change dropdown handler ------------------------\r\n    const onChange = (setetedItem) => {\r\n        setSelectedPost(setetedItem);\r\n    }\r\n    const onChangeUser = (selectedItem) => {\r\n        setSelectedUser(selectedItem);\r\n    }\r\n    //------------------------- change dropdown handler End ------------------------\r\n\r\n    //----------------------Cookies Example-------------------------\r\n    setCookie({\r\n        key:'name',\r\n        value:'deepak'\r\n    });\r\n    const classes = useStyles();\r\n    return (\r\n        <div className={classes.root}>\r\n            <Paper elevation={3} className={classes.paperStyle}>\r\n                <Select\r\n                    name=\"form-field-name\"\r\n                    options={userOptions}\r\n                    onChange={onChangeUser}\r\n                    className={classes.SelectStyle}\r\n                    value = {selectedUser}\r\n                    placeholder = {'Select User'}\r\n                    padding={'20px'}\r\n                />\r\n                <Select\r\n                    name=\"form-field-name2\"\r\n                    options={postOptions}\r\n                    onChange={onChange}\r\n                    className={classes.SelectStyle}\r\n                    value={selectedPost}\r\n                    placeholder={'Select Post'}\r\n                />\r\n                <Paper elevation={2} className={classes.paperStyle2}>\r\n                    {(post.fetchedData != null && post.fetchedData.length !== 0) ? post.fetchedData[0].body : \"\"}\r\n                </Paper>\r\n                <Button onClick={()=>{\r\n                        httpRequest({\r\n                            url: '/users',\r\n                            method: 'Get'\r\n                        }).then((data)=>{\r\n                            console.log(data);\r\n                        }).catch((e=>{\r\n                            console.log(e);\r\n                        }));\r\n                        console.log(`cookie data ${getCookie('name')}`);\r\n                }}>Click me to fetch data</Button>\r\n            </Paper>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home\r\n","import cookie from 'react-cookies'\r\n\r\nexport const setCookie = (argCookies = {}) => {\r\n    let expires, path;\r\n    if (argCookies.expires === undefined || argCookies.expires === null) {\r\n        expires = new Date()\r\n        expires.setDate(Date.now() + 1000 * 60 * 60 * 24 * 14)\r\n    } else {\r\n        expires = argCookies.expires;\r\n    }\r\n    if (argCookies.path === undefined || argCookies.path === null) {\r\n        path = '/';\r\n    } else {\r\n        path = argCookies.path;\r\n    }\r\n    if (argCookies.key !== undefined && argCookies.value !== undefined) {\r\n        cookie.save(\r\n            argCookies.key,\r\n            argCookies.value,\r\n            {\r\n                path: path,\r\n                expires,\r\n                //maxAge: 1000,\r\n                //domain: 'https://play.bukinoshita.io',\r\n                secure: true,\r\n                httpOnly: true\r\n            }\r\n        );\r\n    } else {\r\n        console.log('key and value can not be undefined');\r\n    }\r\n}\r\n\r\nexport const getCookie = (key) => {\r\n    if (key !== undefined && key !== null) {\r\n        return cookie.load(key);\r\n    }\r\n    else {\r\n        console.log(`key can not be ${key}`);\r\n    }\r\n\r\n}","import React from 'react'\r\nfunction PageNotFound() {\r\n    return (\r\n        <div>\r\n            404 Page not found\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PageNotFound\r\n","import React from 'react'\r\nimport {\r\n    Button,\r\n    Card,\r\n    CardBody,\r\n    Row,\r\n    Col,\r\n    Form,\r\n    FormGroup,\r\n    Input,\r\n    Label\r\n} from \"reactstrap\"\r\nimport googleSvg from \"../../assets/img/svg/google.svg\"\r\nimport loginImg from \"../../assets/img/pages/login.png\"\r\n// import \"../../assets/scss/pages/authentication.scss\"\r\nfunction Login() {\r\n    return (\r\n        <Row className=\"m-0 justify-content-center\">\r\n            <Col\r\n                sm=\"8\"\r\n                xl=\"7\"\r\n                lg=\"10\"\r\n                md=\"8\"\r\n                className=\"d-flex justify-content-center\"\r\n            >\r\n               Deepak\r\n            </Col>\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default Login\r\n","import React from 'react'\r\nimport {BrowserRouter as  Router, Switch, Route} from 'react-router-dom'\r\nimport Home from './Components/Home'\r\nimport PageNotFound from './Components/Common/PageNotFound'\r\nimport Login from './Components/OpenPage/Login'\r\n\r\nfunction AppRouter() {\r\n    return (\r\n        <Router basename=\"/React\">\r\n            <Switch>\r\n                <Route  exact path=\"/\" component={Home}/>\r\n                <Route  exact path=\"/Home\" component={Home}/>\r\n                <Route  path=\"/Login\" component={Login}/>\r\n                <Route path=\"*\" component={PageNotFound}/>\r\n            </Switch>\r\n        </Router>\r\n    )\r\n}\r\n\r\nexport default AppRouter\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Router from './Router';\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Router></Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}